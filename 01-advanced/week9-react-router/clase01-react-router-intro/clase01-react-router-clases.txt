react router

  para manejar enrutamiento de aplicaciones de una sola pagina (SPA)

  con esto se tiene una experiencia mas fluida

  el contenido se carga dinamicamente sin recargar la pagina

  react router gestiona la navegacion e historial
    asi la pagina se comporta como una tradicional
    pero con la ventaja de sentirse mas fluida

  react router permite que la SPA
    mantenga sincronizacion entre el URL y lo que se muestra en pantalla
    cada pagina/vista tiene su propio URL unico

  otros pros
    compartir enlaces o generar marcadores
    mejora el SEO: hace el contenido mas accesible para motores de busqueda

  modos
    hay modos para react-router
      declarative
        se usa <Routes><Route /></Routes>
        se hace fetch en los componentes con useEffect por ejemplo
      data
        se usa createBrowserRouter
        aparte se usa loaders/actions; navigation-driven fetching, errors, and revalidation
      framework
        file-based routing + server loaders/actions (e.g., Remix or a RR-based framework)
        same mental model, but handled on the server too

      cosas que se puedan usar o no en cada modo estan aqui
        https://reactrouter.com/start/modes#api--mode-availability-table

  * en clase se usará en react-router algunas partes del modo data
      se estará mostrando las partes de react-router data en games
        para companies se usara una manera regular mas declarativa

  useLoader
    nota que cuando se usa ya no se renderiza el componente hasta que se haya cargado la data
      asi que se queda la pagina congelada hasta que cargue la otra data
      esto se puede mitigar si muestras componentes skeleton mientras se carga

  useNavigate
    para redirigirte entre rutas. para ir a /login por ejemplo ir de /movies/5/edit a movies/5

    puedes usarlo para ir a la pagina/ruta anterior con navigate(-1)

    const navigate = useNavigate();
      es navigate la funcion que puedes usar para la redireccion

  useNavigation
    hook que se dispara cuando ocurre una navegacion
      * navegacion como concepto
          es que cambie el valor del concepto de Location
            Location es un 'record en la historia de donde estuvo el usuario'


          
    ??? para manejar los estados cuando te mueves entre rutas
      en teoria para evitar crear estados de loading dentro del componente
        y usar ya el estado de navegacion que se tiene por react-router

  useLocation

  navLink
    es lo mismo que Link pero
      a los <a /> en los que NavLink se convierte al final les aplica automaticamente clases de 'active'
        puedes agregar css para la clase active y asi mostrar cual link esta activo
      tiene el className prop sobreescrito para poder soportar recibir funciones
        estos props que recibe className se pueden usar para darle estilo
        sirve para poder darle estilos cuando creas estilos para cada componente en lugar de darle estilos globales
    * recuerda que en realidad los unicos props realmente reservados en componentes son key y ref
        className, style, onClick, children, etc. — are just normal props on custom components

  preguntas

    como mostrar un loading para el usuario cuando se usa loader API de react-router

    cuando se usa useNavigation solo funciona si se usa con loader API?

  hay un proyecto de tutorial que se avanzó
    https://reactrouter.com/6.28.0/start/tutorial#tutorial
    que actualmente se ve version 6.28.0

      se crea un BrowserRouter

      Outlet se usa para decirle a un componente de React
        donde es que se quiere renderizar a sus componentes hijos en terminos de ruta
          e.g. tienes un componente padre con toda la vista principal
                quieres cambiar el contenido principal pero mantener el sidebar
                  ese contenido principal cambiaria dependiendo de la ruta nested que tengas como
                    /contacts/:contactId
                      para poder indicarle al padre donde renderizar ese contenido principal
                        para eso se usa <Outlet />

        otra forma de decirlo
          <Outlet /> is a placeholder in a parent route’s element where
            the matched child route’s element is rendered

        por que se llama Outlet
          piensa en electrical outlets
          es un lugar fijo donde se conecta algo
            en este caso seria tu componentes de ruta hija
          es un lugar designado a que fluya algo de alli (electricidad)
            en este caso serian tus componentes de ruta hija

      en lugar de usar <a /> se usa <Link />
        para evitar requests de un documento completo para el siguiente URL
          esto en el fondo lo hace con
            prevent default
            cambiando el history del navegador
            sabiendo que renderizar

      lo que se relaciona en general con react-router es
        segementos de url -- contacts/:id
        componentes -- <Contact />
        data -- un contacto en especifico

      los formularios tambien pueden manipular el historial del navegador

      cuando se envian formularios se usa metodo POST

  tambien hay otra pagina que habla de conceptos principales
    https://reactrouter.com/6.30.1/start/concepts#main-concepts


